TODO list
---------

(ideas)

$builder = new AutomatonBuilder;
$automaton = $builder->setAlphabet(array('a', 'b', 'c'))
	->addState('q0', array(
		'a' => 'q1',
	))
	->addState('q1')
	->setInitials('q1')
	->setFinals('q0', 'q1')
	->createAutomaton();



[obsolete]
- change definition:
	$a = Automaton\Automaton::create()
		->setAlphabet(array('a', 'b'))
		->addState('q0', // state name
			array( // transitions
				'a' => 'q1' // <scalar value for symbol constructor> => <values for target state constructor>
			)
		)
		->setFinals() // array of names or State instances
		->setInitials() // array of names or State instances
- [obsolete] separate alphabet definition:
	- alphabet: array('a', 'b') ... must not have an epsilon symbol
	- then it could be possible to set transitions as:
		array(
			'q0' => array() ... will be mapped as 'q0' => array('a' => array(), 'b' => array())
			'q1' => array('a' => 'q0') ... will be mapped as 'q0' => array('a' => 'q0', 'b' => array())
			...
		)

		after transitions processing check whether in any of them epsilon transitions occured, then map all of them as
		array(
			'state' => array(
				<originals>
				'' => array(),
			),
			...
		)

- state name restrictions docs
- factories:
	- file factory, string factory...
- automaton operations: union, intersection, product, iteration
	- when multiple methods, make the method choice available as an optional method argument (constant)
